datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String
  title String 
  description String? 
  imageUrl String? 
  price Float?
  isPublished Boolean @default(false)
  eduxclusive Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  url String 

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  description String? 
  videoUrl String? 
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Admin {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  lastname        String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            String?
  code            String? @unique
}


model Teacher {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  lastname        String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            String?
  biography     String?
  degrees       String?
  experience    String?
  code          String? @unique

  groups Group[]
}


model Student {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  lastname        String?
  adress          String?
  parentName      String?
  parentEmail     String?
  parentPhone     String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            String?
  biography       String?
  code            String? @unique
  points          String?

  groups Group[]
}


model Group {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name            String
  description     String
  createdAt       DateTime @default(now())
  ends            DateTime?
  t               String?
  b               String?
  chapterId       String? @unique

  results         Result[]
  attendances     Attendance[]
  assignments     Assignment[]
  activityGrades  Activity[]

  teacher Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId String? @db.Uuid

  subject Subject @relation(fields: [subjectId], references: [id])
  subjectId String @db.Uuid

  student Student @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid

  @@index([teacherId])
  @@index([subjectId])
  @@index([studentId])
}


model Result{
id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
type            String
value           String
description     String?
date            DateTime? @default(now())
t               String?

group           Group  @relation(fields: [groupId], references: [id])
groupId         String @db.Uuid

  @@index([groupId])
}


model Activity{
id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
type            String
value           String
description     String?
date            DateTime? @default(now())
t               String?

group           Group  @relation(fields: [groupId], references: [id])
groupId         String @db.Uuid

 @@index([groupId])
}


model Attendance{
id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
type            String
description     String?
date            DateTime?
numberOfClasses Int
classes         String[]
t               String?

group           Group  @relation(fields: [groupId], references: [id])
groupId         String @db.Uuid

 @@index([groupId])
}


model Assignment{
id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
type            String
points          String
description     String?
dateStart       DateTime @default(now())
dateDue         DateTime?
done            Boolean?
t               String?
isMissing       Boolean?

group           Group  @relation(fields: [groupId], references: [id])
groupId         String  @db.Uuid

 @@index([groupId])
}

model Subject{
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  description String?
  color        String?

  groups  Group[]
}